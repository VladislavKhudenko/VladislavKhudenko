# Vladislav Khudenko
# Date: 19/02/2023
# Description: Homework 2
# Grodno IT Academy Python 3.9.10

# Напишите программу, ĸоторая считает общую цену.
# Вводится m рублей и n ĸопееĸ цена, а таĸже ĸоличество s товара.
# Посчитайте общую цену в рублях и ĸопейĸах за l товаров.
# Уточнение:
# Используйте функцию return чтобы ответ был в рублях и копейках.
# Ответ должен быть в формате: "Общая цена составляет M рублей и N копеек за L товаров"

#m - рубли, n копейки, s - количество товара, l - общее количество товаров

def common_price(m, n, s, l):
    if not (isinstance(m, int) and isinstance(n, int) and isinstance(s, int) and isinstance(l, int)):  # Определяется соответствие на необходимый тип входных данных 
        return False
    if m < 0 or n < 0 or s < 0 or l < 0 or m == n == 0 or s == 0:  # Проверяется условие соответствия входных данных для правильного выполнения кода
        return False
    score_ = m * 100 + n  # Рубли переводятся в копейки
    n_1 = score_ // s  # Определяется цена в копейках для одного товара без учета остатка
    n_2 = score_ % s  # Определяется остаток копеек из цены для одного товара
    n_3 = n_1 * l + n_2 * l // s   # Определяется цена в копейках заданного количества товара без учета остатка
    if (((n_2 * l / s) - (n_2 * l / s) // 1) >= 0.5):   # Проверяется условие остатка, при котором получается целая часть копейки
        n_3 = n_3 + 1
    a = (n_3 // 100)  # Определяются рубли из общей цены товара
    v = (n_3 % 100)  # Количество оставшихся копеек из общей цены
    return "Общая цена составляет " + str(a) + " рублей и " + str(v) + " копеек за " + str(l) + " товаров"


# Даны: три стороны треугольника.
# Требуется: проверить, действительно ли это стороны треугольника.
# Если стороны определяют треугольник, найти его площадь с точностью до четырёх десятичных.
# Пример: если строны треугольника равны 2, 2, 2 то мы должны вернуть 1.7321
# Если нет, вывести False.
# Бонусом - с правильным возвратом мы ещё получим обьяснение в консоль почему это не треугольник.

def triangle(a, b, c):
    if isinstance(a, str):  # Определяется соответствие на необходимый тип входных данных 
        return False
    if isinstance(b, str):
        return False
    if isinstance(c,str):
        return False
    if a <= 0 or b <= 0 or c <= 0:  # Проверяется условие соответствия входных данных для правильного выполнения кода
        return False
    if a + b < c or b + c < a or a + c < b:
        print('Не выполняется условие: сумма длин двух сторон треугольника должна быть больше длины третьей стороны!')
        return False
    p = (a + b + c) / 2
    s = (p * (p - a) * (p - b) * (p - c)) ** (1 / 2)  # Используется формула Герона для нахождения площади треугольника
    return round(s, 4)

# Найти самое длинное слово в введенном предложении.
# Учтите что в предложении могут быть знаки препинания.
# Пример: если введено "This is a sample sentence where the longest word is in the middle!",
# то надо вернуть "sentence"

def longest_word(sentence):
    if not isinstance(sentence, str):  # Определяется соответствие на необходимый тип входных данных 
        return False
    if len(sentence) == 0:
        return False
    if '.' in sentence:  # Происходит замена знаков препинания на пустую стороку 
       sentence = sentence.replace('.', '')
    if ',' in sentence:
       sentence = sentence.replace(',', '')
    if '!' in sentence:
       sentence = sentence.replace('!', '')
    if ':' in sentence:
       sentence = sentence.replace(':', '')
    if ';' in sentence:
       sentence = sentence.replace(';', '')
    if '?' in sentence:
       sentence = sentence.replace('?', '')
    if '-' in sentence:
       sentence = sentence.replace('-', '')
    str_ = sentence.split()  # Происходит разбиение строки по пробельным символам
    str_1 = str_[::-1]  # Используется обратный шаг для конвертации нахождения самого длинного слова
    max_len = 0  # Используется переменная для счета количества символов в слове
    for i in str_1:
        if len(i) > max_len:  # Происходит сравнение элементов строки с ранее введенной строкой
            max_len = len(i)  # Происходит перезаписывание переменной при выполнении условия
            longest_word = i  # Происходит перезаписывание переменной при выполнении условия. В переменную помещается слово длиннее предыдущего
    return longest_word

# Вводится строка. Требуется удалить из нее повторяющиеся символы и все пробелы.
# Например, если было введено "abc cde def", то должно быть выведено "abcdef".
def uniques(repeating_string):
    if not isinstance(repeating_string, str):  # Определяется соответствие на необходимый тип входных данных 
        return False
    n_ = repeating_string.replace(' ', '')  # Происходит удаление пробелов
    len_ = ''  # Используется переменная с пустой строкой для последующей конкатенации неповторяющихся символов 
    for i in n_:  # Перебирается каждый элемент строки
        if i not in len_:  # Если буква не содержится в переменной len_ (встречается впервые), то она конкатенируется в переменную len_
            len_ += i
    return len_
        

# Посчитать количество строчных (маленьких) и прописных (больших) букв в введенной строке.
# Проверка рассчитана только на английские буквы.

def count_string_capitalization(mixed_string):
    if not isinstance(mixed_string, str):  # Определяется соответствие на необходимый тип входных данных 
        return False
    counter_1 = 0  # Используется переменная для счета количества входных элементов в строке в диапазоне от 'A' до 'Z'
    counter_2 = 0  # Используется переменная для счета количества входных элементов в строке в диапазоне от 'a' до 'z'
    n_ = mixed_string.replace(' ', '')  # Происходит удаление пробелов 
    for i in n_:  # Перебирается каждый элемент строки
        if 'A' <= i <= 'Z':  # Если элемент строки находится в диапазоне от 'A' до 'Z' то прибавляется единица к переменной counter_1
            counter_1 += 1 
        elif 'a' <= i <= 'z':  # Если элемент строки находится в диапазоне от 'a' до 'z' то прибавляется единица к переменной counter_2
            counter_2 += 1
    return (f'В строке \'{mixed_string}\' {counter_1} большие и {counter_2} маленькие буквы')